import os
import hashlib
import magic
import re
import zipfile
import json

# Simple signature database (in a real app, this would be more extensive and updated)
MALWARE_SIGNATURES = {
    # File hashes known to be malicious (MD5)
    'hashes': [
        '44d88612fea8a8f36de82e1278abb02f',  # Example malware hash (EICAR test signature)
        '3395856ce81f2b7382dee72602f798b6',  # Example malware hash
    ],
    # Text patterns found in malicious files
    'patterns': [
        rb'X5O!P%@AP\[4\\PZX54\(P\^\)7CC\)7\}\$EICAR',  # EICAR test signature pattern
        rb'(?i)this\s+is\s+a\s+virus',  # Example pattern
        rb'(?i)hack(ing|ed|er)',  # Example pattern
        rb'(?i)malware',  # Example pattern
    ],
    # File extensions often associated with malware
    'suspicious_extensions': [
        '.scr', '.bat', '.cmd', '.exe', '.pif', '.vbs'
    ],
    # Strings commonly found in malware
    'suspicious_strings': [
        'cmd.exe /c', 'powershell -e', 'eval(', 'system(', 'exec(',
        'shell_exec(', 'rundll32', 'regsvr32', 'CreateProcess'
    ]
}

def get_file_info(filepath):
    """Get basic file information"""
    statinfo = os.stat(filepath)
    mime = magic.Magic(mime=True)
    file_type = mime.from_file(filepath)
    
    return {
        'name': os.path.basename(filepath),
        'size': statinfo.st_size,
        'type': file_type,
        'extension': os.path.splitext(filepath)[1].lower()
    }

def calculate_hashes(filepath):
    """Calculate MD5, SHA1, and SHA256 hashes for a file"""
    md5 = hashlib.md5()
    sha1 = hashlib.sha1()
    sha256 = hashlib.sha256()
    
    with open(filepath, 'rb') as f:
        while chunk := f.read(8192):
            md5.update(chunk)
            sha1.update(chunk)
            sha256.update(chunk)
    
    return {
        'md5': md5.hexdigest(),
        'sha1': sha1.hexdigest(),
        'sha256': sha256.hexdigest()
    }

def check_signatures(filepath, hashes):
    """Check if file matches known malware signatures"""
    findings = []
    
    # Check file hash against known malicious hashes
    if hashes['md5'] in MALWARE_SIGNATURES['hashes']:
        findings.append(f"File hash matches known malware: {hashes['md5']}")
    
    # Check for suspicious patterns in file content
    try:
        with open(filepath, 'rb') as f:
            content = f.read()
            for pattern in MALWARE_SIGNATURES['patterns']:
                if re.search(pattern, content, re.MULTILINE):
                    findings.append(f"Suspicious pattern detected: {pattern}")
    except Exception:
        findings.append("Could not scan file content for patterns")
    
    # Check for suspicious strings
    try:
        with open(filepath, 'rb') as f:
            content = f.read().decode('utf-8', errors='ignore')
            for string in MALWARE_SIGNATURES['suspicious_strings']:
                if string in content:
                    findings.append(f"Suspicious string found: {string}")
    except Exception:
        pass
    
    return findings

def scan_file(filepath):
    """Scan a file for malware indicators"""
    result = {
        'file_info': get_file_info(filepath),
        'hashes': calculate_hashes(filepath),
        'findings': [],
        'risk_level': 'Low'
    }
    
    # Check file extension
    if result['file_info']['extension'] in MALWARE_SIGNATURES['suspicious_extensions']:
        result['findings'].append(f"Suspicious file extension: {result['file_info']['extension']}")
    
    # Check for known malware signatures
    signature_findings = check_signatures(filepath, result['hashes'])
    result['findings'].extend(signature_findings)
    
    # Determine risk level based on findings
    if len(result['findings']) > 2:
        result['risk_level'] = 'High'
    elif len(result['findings']) > 0:
        result['risk_level'] = 'Medium'
    
    return result